// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripBookingBE.Data;

#nullable disable

namespace TripBookingBE.Commons.Migrations
{
    [DbContext(typeof(TripBookingContext))]
    [Migration("20250821031305_TicketColPaidInt")]
    partial class TicketColPaidInt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SellerTrip", b =>
                {
                    b.Property<long>("SellersId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellingTripsId")
                        .HasColumnType("bigint");

                    b.HasKey("SellersId", "SellingTripsId");

                    b.HasIndex("SellingTripsId");

                    b.ToTable("SellerTrip");
                });

            modelBuilder.Entity("TripBookingBE.Models.CustomerBookTrip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerId");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("dateModified");

                    b.Property<int?>("PlaceNumber")
                        .HasColumnType("int")
                        .HasColumnName("placeNumber");

                    b.Property<long?>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("tripId");

                    b.HasKey("Id")
                        .HasName("PK_CustomerBookTrip_1");

                    b.HasIndex("TripId");

                    b.HasIndex(new[] { "CustomerId", "TripId" }, "IX_CustomerBookTrip")
                        .IsUnique();

                    b.ToTable("CustomerBookTrip");
                });

            modelBuilder.Entity("TripBookingBE.Models.CustomerReviewTrip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("content");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerId");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("dateModified");

                    b.Property<long?>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("tripId");

                    b.HasKey("Id")
                        .HasName("PK_UserReviewTrip");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TripId");

                    b.ToTable("CustomerReviewTrip");
                });

            modelBuilder.Entity("TripBookingBE.Models.GeneralParam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("ParamCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("paramCode");

                    b.Property<string>("ParamDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("paramDescription");

                    b.Property<string>("ParamKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("paramKey");

                    b.HasKey("Id")
                        .HasName("PK_GeneralParam_1");

                    b.ToTable("GeneralParams");
                });

            modelBuilder.Entity("TripBookingBE.Models.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("dateCreated");

                    b.Property<DateTime?>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("dateModified");

                    b.Property<string>("RouteDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("routeDescription");

                    b.HasKey("Id");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("TripBookingBE.Models.Ticket", b =>
                {
                    b.Property<long>("CustomerBookTripId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerBookTripId");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("dateModified");

                    b.Property<long?>("GeneralParamId")
                        .HasColumnType("bigint")
                        .HasColumnName("generalParamId");

                    b.Property<int>("Paid")
                        .HasColumnType("int")
                        .HasColumnName("paid");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal")
                        .HasColumnName("price");

                    b.Property<string>("SellerCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("sellerCode");

                    b.HasKey("CustomerBookTripId");

                    b.HasIndex("GeneralParamId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("TripBookingBE.Models.Trip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("dateModified");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime")
                        .HasColumnName("departureTime");

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("driverId");

                    b.Property<int?>("PlaceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("placeCount");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("registrationNumber");

                    b.Property<long?>("RouteId")
                        .HasColumnType("bigint")
                        .HasColumnName("routeId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RouteId");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("TripBookingBE.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<string>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("avatar")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("dateModified");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("firstName");

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("lastLogin")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("lastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("SellerCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("sellerCode");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("CUSTOMER")
                        .HasColumnName("type");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("PK__User__3213E83F36DAC7FF");

                    b.HasIndex(new[] { "UserName" }, "UQ__User__66DCF95C55A682B1")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("SellerTrip", b =>
                {
                    b.HasOne("TripBookingBE.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SellersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripBookingBE.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("SellingTripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TripBookingBE.Models.CustomerBookTrip", b =>
                {
                    b.HasOne("TripBookingBE.Models.User", "Customer")
                        .WithMany("CustomerBookTrips")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CustomerBookTrip_Customer");

                    b.HasOne("TripBookingBE.Models.Trip", "Trip")
                        .WithMany("CustomerBookTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_CustomerBookTrip_Trip");

                    b.Navigation("Customer");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripBookingBE.Models.CustomerReviewTrip", b =>
                {
                    b.HasOne("TripBookingBE.Models.User", "Customer")
                        .WithMany("CustomerReviewTrips")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserReviewTrip_User");

                    b.HasOne("TripBookingBE.Models.Trip", "Trip")
                        .WithMany("CustomerReviewTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_UserReviewTrip_Trip");

                    b.Navigation("Customer");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripBookingBE.Models.Ticket", b =>
                {
                    b.HasOne("TripBookingBE.Models.CustomerBookTrip", "CustomerBookTrip")
                        .WithOne("Ticket")
                        .HasForeignKey("TripBookingBE.Models.Ticket", "CustomerBookTripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_CustomerBookTrip");

                    b.HasOne("TripBookingBE.Models.GeneralParam", "GeneralParam")
                        .WithMany("Tickets")
                        .HasForeignKey("GeneralParamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Ticket_GeneralParam");

                    b.Navigation("CustomerBookTrip");

                    b.Navigation("GeneralParam");
                });

            modelBuilder.Entity("TripBookingBE.Models.Trip", b =>
                {
                    b.HasOne("TripBookingBE.Models.User", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Trip_Driver");

                    b.HasOne("TripBookingBE.Models.Route", "Route")
                        .WithMany("Trips")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Trip_Route");

                    b.Navigation("Driver");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TripBookingBE.Models.CustomerBookTrip", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TripBookingBE.Models.GeneralParam", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TripBookingBE.Models.Route", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TripBookingBE.Models.Trip", b =>
                {
                    b.Navigation("CustomerBookTrips");

                    b.Navigation("CustomerReviewTrips");
                });

            modelBuilder.Entity("TripBookingBE.Models.User", b =>
                {
                    b.Navigation("CustomerBookTrips");

                    b.Navigation("CustomerReviewTrips");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
